[{"name": "app.py", "content": "import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import ui, input, render\nimport plotly.express as px\nfrom shiny import reactive\nfrom shiny.render import plot as render_plot\nfrom shinywidgets import render_plotly\n\n# --- 1. Data Loading ---\npenguins = load_penguins()\n\n# --- 2. User Interface (UI) Definition ---\nui.page_opts(title=\"Interactive Penguin Data Visualizations\", fillable=True)\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar Filters\")\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Select Species\",\n        choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=True,\n    )\n    # New: Add an island filter\n    ui.input_checkbox_group(\n        \"selected_island_list\",\n        \"Select Island\",\n        choices=[\"Torgersen\", \"Biscoe\", \"Dream\"],\n        selected=[\"Torgersen\", \"Biscoe\", \"Dream\"],\n        inline=True,\n    )\n    ui.hr()\n    ui.h3(\"Histogram Options\")\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Attribute for Histograms\",\n        choices=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n        selected=\"flipper_length_mm\"\n    )\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Histogram Bins\", 20)\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Histogram Bins\", 0, 100, 20)\n\n    ui.hr()\n    ui.a(\"GitHub Repository\", href=\"https://github.com/s-golla/cintel-03-reactive\", target=\"_blank\")\n\n# --- 3. Server Logic and Output Definitions ---\n\n# --- Data Tables and Grids ---\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Penguin Data Table (Filtered)\")\n\n        @render.data_frame\n        def penguin_data_table():\n            return render.DataTable(filtered_data())\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Penguin Data Grid (Filtered)\")\n\n        @render.data_frame\n        def penguin_data_grid():\n            return render.DataGrid(filtered_data())\n\n# --- Histograms and Scatterplot ---\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram (Combined and Filtered by Species)\") # Updated title\n\n        @render_plotly\n        def plotly_histogram():\n            selected_attribute = input.selected_attribute()\n            return px.histogram(\n                filtered_data(), # Data is already filtered by selected_species_list and island\n                x=selected_attribute,\n                nbins=input.plotly_bin_count(),\n                title=f\"Distribution of {selected_attribute} (Combined and Filtered)\", # Updated title\n                color=\"species\", # Keep color to differentiate species within the combined histogram\n                barmode=\"overlay\", # Overlay bars for different species\n                opacity=0.7 # Add some opacity to see overlapping bars\n            )\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram (Filtered by Species and Island)\") # Updated title\n\n        @render_plot\n        def seaborn_histogram():\n            selected_attribute = input.selected_attribute()\n            plt.figure(figsize=(8, 6))\n            sns.histplot(\n                data=filtered_data(),\n                x=selected_attribute,\n                bins=input.seaborn_bin_count(),\n                kde=True,\n                hue=\"species\",\n                multiple=\"stack\",\n            )\n            plt.title(f\"Distribution of {selected_attribute} (Filtered)\")\n            plt.xlabel(selected_attribute)\n            plt.ylabel(\"Count\")\n            plt.legend(title=\"Species\")\n            plt.tight_layout()\n\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Scatterplot: Flipper Length vs Body Mass (Filtered by Species and Island)\") # Updated title\n\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(\n                filtered_data(),\n                x=\"flipper_length_mm\",\n                y=\"body_mass_g\",\n                color=\"species\",\n                symbol=\"sex\",\n                title=\"Penguin Flipper Length vs Body Mass by Species and Sex (Filtered)\",\n                labels={\n                    \"flipper_length_mm\": \"Flipper Length (mm)\",\n                    \"body_mass_g\": \"Body Mass (g)\",\n                },\n                hover_data=[\"island\", \"bill_length_mm\", \"bill_depth_mm\"],\n            )\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Modified reactive calculation to filter the data by species AND island\n@reactive.calc\ndef filtered_data():\n    df = penguins.copy()\n\n    # Filter by species\n    if input.selected_species_list():\n        df = df[df[\"species\"].isin(input.selected_species_list())]\n    else:\n        return penguins.head(0) # Return empty if no species are selected\n\n    # Filter by island\n    if input.selected_island_list():\n        df = df[df[\"island\"].isin(input.selected_island_list())]\n    else:\n        # If no islands are selected, should we show nothing or all species for selected islands?\n        # For this example, we'll return an empty DataFrame if no islands are selected.\n        return penguins.head(0) # Return empty if no islands are selected\n\n\n    return df\n", "type": "text"}]